#pragma checksum "C:\SomePrograms\WingetUI-Store\src\wingetui\Interface\SoftwarePages\InstalledPackages.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "D7E46BB8AB643F1EBE22770CD2E997275090668CA72B9021E1926CB425676FBB"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModernWindow.Interface
{
    partial class InstalledPackagesPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Opacity(global::Microsoft.UI.Xaml.UIElement obj, global::System.Double value)
            {
                obj.Opacity = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(global::Microsoft.UI.Xaml.DependencyObject obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                global::Microsoft.UI.Xaml.Controls.ToolTipService.SetToolTip(obj, value);
            }
            public static void Set_ModernWindow_Interface_Widgets_LocalIcon_IconName(global::ModernWindow.Interface.Widgets.LocalIcon obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.IconName = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InstalledPackagesPage_obj3_Bindings :
            global::Microsoft.UI.Xaml.IDataTemplateExtension,
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IInstalledPackagesPage_Bindings
        {
            private global::ModernWindow.PackageEngine.Classes.Package dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj3;
            private global::Microsoft.UI.Xaml.Controls.CheckBox obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj7;
            private global::ModernWindow.Interface.Widgets.LocalIcon obj8;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj9;
            private global::Microsoft.UI.Xaml.Controls.Border obj10;
            private global::ModernWindow.Interface.Widgets.LocalIcon obj11;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3OpacityDisabled = false;
            private static bool isobj4IsCheckedDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj5ToolTipDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj6ToolTipDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj7ToolTipDisabled = false;
            private static bool isobj8IconNameDisabled = false;
            private static bool isobj9TextDisabled = false;
            private static bool isobj9ToolTipDisabled = false;
            private static bool isobj10VisibilityDisabled = false;
            private static bool isobj11IconNameDisabled = false;

            private InstalledPackagesPage_obj3_BindingsTracking bindingsTracking;

            public InstalledPackagesPage_obj3_Bindings()
            {
                this.bindingsTracking = new InstalledPackagesPage_obj3_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 505 && columnNumber == 37)
                {
                    isobj3OpacityDisabled = true;
                }
                else if (lineNumber == 523 && columnNumber == 21)
                {
                    isobj4IsCheckedDisabled = true;
                }
                else if (lineNumber == 540 && columnNumber == 21)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 541 && columnNumber == 21)
                {
                    isobj5ToolTipDisabled = true;
                }
                else if (lineNumber == 551 && columnNumber == 21)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 552 && columnNumber == 21)
                {
                    isobj6ToolTipDisabled = true;
                }
                else if (lineNumber == 562 && columnNumber == 21)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 563 && columnNumber == 21)
                {
                    isobj7ToolTipDisabled = true;
                }
                else if (lineNumber == 568 && columnNumber == 21)
                {
                    isobj8IconNameDisabled = true;
                }
                else if (lineNumber == 573 && columnNumber == 21)
                {
                    isobj9TextDisabled = true;
                }
                else if (lineNumber == 574 && columnNumber == 21)
                {
                    isobj9ToolTipDisabled = true;
                }
                else if (lineNumber == 529 && columnNumber == 47)
                {
                    isobj10VisibilityDisabled = true;
                }
                else if (lineNumber == 531 && columnNumber == 29)
                {
                    isobj11IconNameDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Interface\SoftwarePages\InstalledPackages.xaml line 505
                        this.obj3 = new global::System.WeakReference(global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target));
                        break;
                    case 4: // Interface\SoftwarePages\InstalledPackages.xaml line 520
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Interface\SoftwarePages\InstalledPackages.xaml line 537
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Interface\SoftwarePages\InstalledPackages.xaml line 548
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // Interface\SoftwarePages\InstalledPackages.xaml line 559
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 8: // Interface\SoftwarePages\InstalledPackages.xaml line 565
                        this.obj8 = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.LocalIcon>(target);
                        break;
                    case 9: // Interface\SoftwarePages\InstalledPackages.xaml line 570
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 10: // Interface\SoftwarePages\InstalledPackages.xaml line 526
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                        break;
                    case 11: // Interface\SoftwarePages\InstalledPackages.xaml line 530
                        this.obj11 = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.LocalIcon>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            public void DataContextChangedHandler(global::Microsoft.UI.Xaml.FrameworkElement sender, global::Microsoft.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Microsoft.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj3.Target as global::Microsoft.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_(global::WinRT.CastExtensions.As<global::ModernWindow.PackageEngine.Classes.Package>(item), 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IInstalledPackagesPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ModernWindow.PackageEngine.Classes.Package>(newDataRoot);
                    return true;
                }
                return false;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_Source_M_ToString_371857150(int phase)
            {
                global::System.String result = this.dataRoot.Source.ToString();
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 570
                    if (!isobj9TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj9, result, null);
                    }
                    // Interface\SoftwarePages\InstalledPackages.xaml line 570
                    if (!isobj9ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj9, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ModernWindow.PackageEngine.Classes.Package obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ListedOpacity(obj.ListedOpacity, phase);
                        this.Update_IsChecked(obj.IsChecked, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ListedNameTooltip(obj.ListedNameTooltip, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Id(obj.Id, phase);
                        this.Update_Version(obj.Version, phase);
                        this.Update_Source(obj.Source, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ListIconShowHighlight(obj.ListIconShowHighlight, phase);
                        this.Update_ListedIconId(obj.ListedIconId, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_ListedOpacity(global::System.Single obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 505
                    if (!isobj3OpacityDisabled)
                    {
                        if ((this.obj3.Target as global::Microsoft.UI.Xaml.Controls.Grid) != null)
                        {
                            XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity((this.obj3.Target as global::Microsoft.UI.Xaml.Controls.Grid), obj);
                        }
                    }
                }
            }
            private void Update_IsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 520
                    if (!isobj4IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj4, obj, null);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 537
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ListedNameTooltip(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 537
                    if (!isobj5ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj5, obj, null);
                    }
                }
            }
            private void Update_Id(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 548
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                    // Interface\SoftwarePages\InstalledPackages.xaml line 548
                    if (!isobj6ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj6, obj, null);
                    }
                }
            }
            private void Update_Version(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 559
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                    // Interface\SoftwarePages\InstalledPackages.xaml line 559
                    if (!isobj7ToolTipDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj7, obj, null);
                    }
                }
            }
            private void Update_Source(global::ModernWindow.PackageEngine.Classes.ManagerSource obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Source_IconId(obj.IconId, phase);
                        this.Update_Source_M_ToString_371857150(phase);
                    }
                }
            }
            private void Update_Source_IconId(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 565
                    if (!isobj8IconNameDisabled)
                    {
                        XamlBindingSetters.Set_ModernWindow_Interface_Widgets_LocalIcon_IconName(this.obj8, obj, null);
                    }
                }
            }
            private void Update_Source_M_ToString_371857150(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    if (!isobj9TextDisabled)
                    {
                        this.PendingFunctionBindings["Source_M_ToString_371857150"] = new InvokeFunctionDelegate(this.Invoke_Source_M_ToString_371857150); 
                    }
                    if (!isobj9ToolTipDisabled)
                    {
                        this.PendingFunctionBindings["Source_M_ToString_371857150"] = new InvokeFunctionDelegate(this.Invoke_Source_M_ToString_371857150); 
                    }
                }
            }
            private void Update_ListIconShowHighlight(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ListIconShowHighlight_Cast_ListIconShowHighlight_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ListIconShowHighlight_Cast_ListIconShowHighlight_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 526
                    if (!isobj10VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj10, obj);
                    }
                }
            }
            private void Update_ListedIconId(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 530
                    if (!isobj11IconNameDisabled)
                    {
                        XamlBindingSetters.Set_ModernWindow_Interface_Widgets_LocalIcon_IconName(this.obj11, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_4_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsChecked = (global::System.Boolean)this.obj4.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InstalledPackagesPage_obj3_BindingsTracking
            {
                private global::System.WeakReference<InstalledPackagesPage_obj3_Bindings> weakRefToBindingObj; 

                public InstalledPackagesPage_obj3_BindingsTracking(InstalledPackagesPage_obj3_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InstalledPackagesPage_obj3_Bindings>(obj);
                }

                public InstalledPackagesPage_obj3_Bindings TryGetBindingObject()
                {
                    InstalledPackagesPage_obj3_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InstalledPackagesPage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ModernWindow.PackageEngine.Classes.Package obj = sender as global::ModernWindow.PackageEngine.Classes.Package;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ListedOpacity(obj.ListedOpacity, DATA_CHANGED);
                                bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                                bindings.Update_ListedNameTooltip(obj.ListedNameTooltip, DATA_CHANGED);
                                bindings.Update_ListIconShowHighlight(obj.ListIconShowHighlight, DATA_CHANGED);
                                bindings.Update_ListedIconId(obj.ListedIconId, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ListedOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ListedOpacity(obj.ListedOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ListedNameTooltip":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ListedNameTooltip(obj.ListedNameTooltip, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ListIconShowHighlight":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ListIconShowHighlight(obj.ListIconShowHighlight, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ListedIconId":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ListedIconId(obj.ListedIconId, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void UpdateChildListeners_(global::ModernWindow.PackageEngine.Classes.Package obj)
                {
                    InstalledPackagesPage_obj3_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_4(global::Microsoft.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InstalledPackagesPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IInstalledPackagesPage_Bindings
        {
            private global::ModernWindow.Interface.InstalledPackagesPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ListView obj82;
            private global::Microsoft.UI.Xaml.Controls.CheckBox obj105;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj82ItemsSourceDisabled = false;
            private static bool isobj105IsCheckedDisabled = false;

            private InstalledPackagesPage_obj1_BindingsTracking bindingsTracking;

            public InstalledPackagesPage_obj1_Bindings()
            {
                this.bindingsTracking = new InstalledPackagesPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 821 && columnNumber == 21)
                {
                    isobj82ItemsSourceDisabled = true;
                }
                else if (lineNumber == 723 && columnNumber == 148)
                {
                    isobj105IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 82: // Interface\SoftwarePages\InstalledPackages.xaml line 820
                        this.obj82 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        this.bindingsTracking.RegisterTwoWayListener_82(this.obj82);
                        break;
                    case 105: // Interface\SoftwarePages\InstalledPackages.xaml line 723
                        this.obj105 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IInstalledPackagesPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.InstalledPackagesPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private bool TryGet_InstantSearchSettingString(out global::System.String val)
            {
                global::ModernWindow.Interface.InstalledPackagesPage obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.InstantSearchSettingString;
                    return true;
                }
                else
                {
                    val = default(global::System.String);
                    return false;
                }
            }

            private bool TryGet_(out global::ModernWindow.Interface.InstalledPackagesPage val)
            {
                val = this.dataRoot;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_Tools_M_GetSettings_2305341048(int phase)
            {
                global::System.Boolean p1 = true;
                global::System.String p0;
                if (!TryGet_InstantSearchSettingString(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.Tools.GetSettings(p0, p1);
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 723
                    if (!isobj105IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj105, result, null);
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::ModernWindow.Interface.InstalledPackagesPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_FilteredPackages(obj.FilteredPackages, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Tools(obj.Tools, phase);
                        this.Update_InstantSearchSettingString(obj.InstantSearchSettingString, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_FilteredPackages(global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_FilteredPackages(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Interface\SoftwarePages\InstalledPackages.xaml line 820
                    if (!isobj82ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj82, obj, null);
                    }
                }
            }
            private void Update_Tools(global::ModernWindow.Structures.AppTools obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Tools_M_GetSettings_2305341048(phase);
                    }
                }
            }
            private void Update_InstantSearchSettingString(global::System.String obj, int phase)
            {
                if (obj != null)
                {
                    this.Update_Tools_M_GetSettings_2305341048(phase);
                }
            }
            private void Update_Tools_M_GetSettings_2305341048(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    if (!isobj105IsCheckedDisabled)
                    {
                        this.PendingFunctionBindings["Tools_M_GetSettings_2305341048"] = new InvokeFunctionDelegate(this.Invoke_Tools_M_GetSettings_2305341048); 
                    }
                }
            }
            private void UpdateTwoWay_82_ItemsSource()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.FilteredPackages = (global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package>)this.obj82.ItemsSource;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InstalledPackagesPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<InstalledPackagesPage_obj1_Bindings> weakRefToBindingObj; 

                public InstalledPackagesPage_obj1_BindingsTracking(InstalledPackagesPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InstalledPackagesPage_obj1_Bindings>(obj);
                }

                public InstalledPackagesPage_obj1_Bindings TryGetBindingObject()
                {
                    InstalledPackagesPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_FilteredPackages(null);
                }

                public void PropertyChanged_FilteredPackages(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InstalledPackagesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package> obj = sender as global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void CollectionChanged_FilteredPackages(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    InstalledPackagesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package> obj = sender as global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package>;
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package> cache_FilteredPackages = null;
                public void UpdateChildListeners_FilteredPackages(global::ModernWindow.Essentials.SortableObservableCollection<global::ModernWindow.PackageEngine.Classes.Package> obj)
                {
                    if (obj != cache_FilteredPackages)
                    {
                        if (cache_FilteredPackages != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_FilteredPackages).PropertyChanged -= PropertyChanged_FilteredPackages;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_FilteredPackages).CollectionChanged -= CollectionChanged_FilteredPackages;
                            cache_FilteredPackages = null;
                        }
                        if (obj != null)
                        {
                            cache_FilteredPackages = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_FilteredPackages;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_FilteredPackages;
                        }
                    }
                }
                public void RegisterTwoWayListener_82(global::Microsoft.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ItemsControl.ItemsSourceProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_82_ItemsSource();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Interface\SoftwarePages\InstalledPackages.xaml line 2
                {
                    this.DiscoverPage = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Page>(target);
                }
                break;
            case 78: // Interface\SoftwarePages\InstalledPackages.xaml line 592
                {
                    this.MainHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 79: // Interface\SoftwarePages\InstalledPackages.xaml line 647
                {
                    this.BodyGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 80: // Interface\SoftwarePages\InstalledPackages.xaml line 656
                {
                    this.__loading_progressbar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ProgressBar>(target);
                }
                break;
            case 81: // Interface\SoftwarePages\InstalledPackages.xaml line 659
                {
                    this.SidePanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ScrollView)this.SidePanel).SizeChanged += this.SidepanelWidth_SizeChanged;
                }
                break;
            case 82: // Interface\SoftwarePages\InstalledPackages.xaml line 820
                {
                    this.__package_list = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 83: // Interface\SoftwarePages\InstalledPackages.xaml line 888
                {
                    this.BackgroundText = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.TranslatedTextBlock>(target);
                }
                break;
            case 84: // Interface\SoftwarePages\InstalledPackages.xaml line 826
                {
                    this.PackageContextMenu = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenu>(target);
                }
                break;
            case 85: // Interface\SoftwarePages\InstalledPackages.xaml line 827
                {
                    this.MenuUninstall = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuUninstall).Click += this.MenuUninstall_Invoked;
                }
                break;
            case 86: // Interface\SoftwarePages\InstalledPackages.xaml line 832
                {
                    this.MenuInstallSettings = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuInstallSettings).Click += this.MenuInstallSettings_Invoked;
                }
                break;
            case 87: // Interface\SoftwarePages\InstalledPackages.xaml line 837
                {
                    this.MenuAsAdmin = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuAsAdmin).Click += this.MenuAsAdmin_Invoked;
                }
                break;
            case 88: // Interface\SoftwarePages\InstalledPackages.xaml line 841
                {
                    this.MenuInteractive = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuInteractive).Click += this.MenuInteractive_Invoked;
                }
                break;
            case 89: // Interface\SoftwarePages\InstalledPackages.xaml line 845
                {
                    this.MenuRemoveData = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuRemoveData).Click += this.MenuRemoveData_Invoked;
                }
                break;
            case 90: // Interface\SoftwarePages\InstalledPackages.xaml line 850
                {
                    this.MenuReinstall = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuReinstall).Click += this.MenuReinstall_Invoked;
                }
                break;
            case 91: // Interface\SoftwarePages\InstalledPackages.xaml line 854
                {
                    this.MenuUninstallThenReinstall = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuUninstallThenReinstall).Click += this.MenuUninstallThenReinstall_Invoked;
                }
                break;
            case 92: // Interface\SoftwarePages\InstalledPackages.xaml line 859
                {
                    this.MenuIgnorePackage = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuIgnorePackage).Click += this.MenuIgnorePackage_Invoked;
                }
                break;
            case 93: // Interface\SoftwarePages\InstalledPackages.xaml line 864
                {
                    this.MenuShare = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuShare).Click += this.MenuShare_Invoked;
                }
                break;
            case 94: // Interface\SoftwarePages\InstalledPackages.xaml line 868
                {
                    this.MenuDetails = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.BetterMenuItem>(target);
                    ((global::ModernWindow.Interface.Widgets.BetterMenuItem)this.MenuDetails).Click += this.MenuDetails_Invoked;
                }
                break;
            case 95: // Interface\SoftwarePages\InstalledPackages.xaml line 813
                {
                    this.CheckboxHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 96: // Interface\SoftwarePages\InstalledPackages.xaml line 814
                {
                    this.NameHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 97: // Interface\SoftwarePages\InstalledPackages.xaml line 815
                {
                    this.IdHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 98: // Interface\SoftwarePages\InstalledPackages.xaml line 816
                {
                    this.VersionHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 99: // Interface\SoftwarePages\InstalledPackages.xaml line 817
                {
                    this.SourceHeader = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 100: // Interface\SoftwarePages\InstalledPackages.xaml line 663
                {
                    this.SidePanelGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 101: // Interface\SoftwarePages\InstalledPackages.xaml line 754
                {
                    this.QueryOptionsGroup = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButtons>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioButtons)this.QueryOptionsGroup).SelectionChanged += this.FilterOptionsChanged;
                }
                break;
            case 102: // Interface\SoftwarePages\InstalledPackages.xaml line 755
                {
                    this.QueryNameRadio = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                }
                break;
            case 103: // Interface\SoftwarePages\InstalledPackages.xaml line 760
                {
                    this.QueryIdRadio = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                }
                break;
            case 104: // Interface\SoftwarePages\InstalledPackages.xaml line 765
                {
                    this.QueryBothRadio = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioButton>(target);
                }
                break;
            case 105: // Interface\SoftwarePages\InstalledPackages.xaml line 723
                {
                    this.InstantSearchCheckbox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.InstantSearchCheckbox).Checked += this.InstantSearchValueChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.InstantSearchCheckbox).Unchecked += this.InstantSearchValueChanged;
                }
                break;
            case 106: // Interface\SoftwarePages\InstalledPackages.xaml line 728
                {
                    this.UpperLowerCaseCheckbox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.UpperLowerCaseCheckbox).Checked += this.FilterOptionsChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.UpperLowerCaseCheckbox).Unchecked += this.FilterOptionsChanged;
                }
                break;
            case 107: // Interface\SoftwarePages\InstalledPackages.xaml line 733
                {
                    this.IgnoreSpecialCharsCheckbox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.IgnoreSpecialCharsCheckbox).Checked += this.FilterOptionsChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.IgnoreSpecialCharsCheckbox).Unchecked += this.FilterOptionsChanged;
                }
                break;
            case 108: // Interface\SoftwarePages\InstalledPackages.xaml line 685
                {
                    this.SourcesPlaceholderText = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.TranslatedTextBlock>(target);
                }
                break;
            case 109: // Interface\SoftwarePages\InstalledPackages.xaml line 688
                {
                    this.SourcesTreeViewGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 110: // Interface\SoftwarePages\InstalledPackages.xaml line 697
                {
                    this.SelectAllSourcesButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.HyperlinkButton)this.SelectAllSourcesButton).Click += this.SelectAllSourcesButton_Click;
                }
                break;
            case 111: // Interface\SoftwarePages\InstalledPackages.xaml line 700
                {
                    this.ClearSourceSelectionButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.HyperlinkButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.HyperlinkButton)this.ClearSourceSelectionButton).Click += this.ClearSourceSelectionButton_Click;
                }
                break;
            case 112: // Interface\SoftwarePages\InstalledPackages.xaml line 703
                {
                    this.SourcesTreeView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TreeView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TreeView)this.SourcesTreeView).SelectionChanged += this.SourcesTreeView_SelectionChanged;
                }
                break;
            case 113: // Interface\SoftwarePages\InstalledPackages.xaml line 604
                {
                    this.HeaderIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                }
                break;
            case 114: // Interface\SoftwarePages\InstalledPackages.xaml line 606
                {
                    this.__main_title = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.TranslatedTextBlock>(target);
                }
                break;
            case 115: // Interface\SoftwarePages\InstalledPackages.xaml line 612
                {
                    this.__main_subtitle = global::WinRT.CastExtensions.As<global::ModernWindow.Interface.Widgets.TranslatedTextBlock>(target);
                }
                break;
            case 116: // Interface\SoftwarePages\InstalledPackages.xaml line 643
                {
                    this.ToolBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CommandBar>(target);
                }
                break;
            case 117: // Interface\SoftwarePages\InstalledPackages.xaml line 623
                {
                    this.QueryBlock = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 118: // Interface\SoftwarePages\InstalledPackages.xaml line 626
                {
                    this.FindButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            case 119: // Interface\SoftwarePages\InstalledPackages.xaml line 637
                {
                    this.ReloadButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2403")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Interface\SoftwarePages\InstalledPackages.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    InstalledPackagesPage_obj1_Bindings bindings = new InstalledPackagesPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 3: // Interface\SoftwarePages\InstalledPackages.xaml line 505
                {                    
                    global::Microsoft.UI.Xaml.Controls.Grid element3 = (global::Microsoft.UI.Xaml.Controls.Grid)target;
                    InstalledPackagesPage_obj3_Bindings bindings = new InstalledPackagesPage_obj3_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element3.DataContext);
                    element3.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Microsoft.UI.Xaml.DataTemplate.SetExtensionInstance(element3, bindings);
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element3, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

