if __name__ == "__main__":
    # WingetUI cannot be run directly from this file, it must be run by importing the wingetui module
    import os
    import subprocess
    import sys
    if __file__ not in sys.argv:
        sys.exit(subprocess.run(["cmd", "/C", "python", "-m", "wingetui"], shell=True, cwd=os.path.dirname(__file__).split("wingetui")[0]).returncode)


def CheckProgramIntegrity():
    # BEGIN AUTOGENERATED HASH DICTIONARY
    HASHES: dict[str:str] = {
        "./ExternalLibraries/PyWebView2/lib\\Microsoft.Web.WebView2.Core.dll": "5e172b4f558723b7dbb7f568f301077c84d6571436fbe5a5f45bfa621c020403",
        "./ExternalLibraries/PyWebView2/lib\\Microsoft.Web.WebView2.WinForms.dll": "bef507a4ce7b6a848993bc504af7e2273cec22e77469787cb1d47d3f362164ed",
        "./ExternalLibraries/PyWebView2/lib\\Microsoft.Web.WebView2.Wpf.dll": "bf8fd64fe7afbcf7646631baa160c3a6d85b8a51777e52fb471f0230950de754",
        "./ExternalLibraries/PyWebView2/lib\\WinFormsWebView.dll": "4787a9c76470159e712f00ff4a017410e0142a39302efc499442b847f7032349",
        "./components\\gsudo.exe": "1acd324cf636c53012b57467fd7a356520d4199e45acda4a0876cb52c03091a1",
        "./components\\ShareLibrary.dll": "f1946a8120a983c096c145b928ec81ced551ebf5831ac5b60f227f2cf6e9d51d",
        "./PackageEngine/Managers\\winget-cli_arm64\\AppInstallerBackgroundTasks.dll": "c2e8bc11c660089a3205f2aed4b9eca5dcb179e5e6d498aa54c6c23a99969fd2",
        "./PackageEngine/Managers\\winget-cli_arm64\\concrt140_app.dll": "4db7af9b413a1701dd1dcb160fcf278e17fe853df00ab7e464a5ae0cdac7f210",
        "./PackageEngine/Managers\\winget-cli_arm64\\Microsoft.Management.Configuration.dll": "73a320cc993b6983e3b0e3a5c1378369034e1363f38cc9e251e95ea688119fdc",
        "./PackageEngine/Managers\\winget-cli_arm64\\msvcp140_1_app.dll": "cf85b18bfed5c2fe272191710f4a94bf89b073444559485d3c207428e1e14d0f",
        "./PackageEngine/Managers\\winget-cli_arm64\\msvcp140_2_app.dll": "7801f087c4bd562078c7add3703f0f17e960d559347c6ae661b087d7d53e6676",
        "./PackageEngine/Managers\\winget-cli_arm64\\msvcp140_app.dll": "63b81d6b4ee93c8009c13fd25a66a5ebd1bdd98ba4c760877a460f93b05db81f",
        "./PackageEngine/Managers\\winget-cli_arm64\\vcamp140_app.dll": "0cf01007508805206da47e5da1d9f3fdcd1fe173db35517acf4dcbca837908f8",
        "./PackageEngine/Managers\\winget-cli_arm64\\vccorlib140_app.dll": "55c69e9d09a29a84a423a38be7b8604e892b909b6e07ecace6278fc0c7977645",
        "./PackageEngine/Managers\\winget-cli_arm64\\vcomp140_app.dll": "c06e8cf98d5777ec057ab14e14a63a91e3ff64ccc5513099f0af5931c010f760",
        "./PackageEngine/Managers\\winget-cli_arm64\\vcruntime140_app.dll": "b874df3ab7d4d3e0eba5e2c54ed7c5affcc3674600c806fa42f8e8725bdb0466",
        "./PackageEngine/Managers\\winget-cli_arm64\\WindowsPackageManager.dll": "58f1f7980d82a67fab688412ed01072f5f23662b106c6b6800f18d213a3a59e2",
        "./PackageEngine/Managers\\winget-cli_x64\\AppInstallerBackgroundTasks.dll": "d758d915c5f6dd71b3e9057d7bfc046c8c5b7abf34c2d7c05e2d879ca163df62",
        "./PackageEngine/Managers\\winget-cli_x64\\concrt140_app.dll": "d72a4391c4852bf4f0937f18d7edbf9ac4343e19861d7856c249615c12e4dd9c",
        "./PackageEngine/Managers\\winget-cli_x64\\Microsoft.Management.Configuration.dll": "d4903ed722027109035a4def838aca45088e73efc993d479a3c66320d0a2672e",
        "./PackageEngine/Managers\\winget-cli_x64\\msvcp140_1_app.dll": "b5d37b76fe107d5d23f498b582cf11dc1b3c4649c844ed7dc7c2e27001072823",
        "./PackageEngine/Managers\\winget-cli_x64\\msvcp140_2_app.dll": "580c855e1e58510207b9156df9bdb32ffbd15ce4405babcb90694212a8798587",
        "./PackageEngine/Managers\\winget-cli_x64\\msvcp140_app.dll": "d0637809160ce043e5530daf6b93bf59611b4de409274c55ba87a2cef57cb202",
        "./PackageEngine/Managers\\winget-cli_x64\\vcamp140_app.dll": "e32420c9f3046a0112fd5fb47401978565db2bcad95857be7a4bc83f05f7aa6f",
        "./PackageEngine/Managers\\winget-cli_x64\\vccorlib140_app.dll": "e758adafe70e48a4f79b19b6c2013e35714415054b6b3ee672eb91b58e91f6c8",
        "./PackageEngine/Managers\\winget-cli_x64\\vcomp140_app.dll": "e6ef242b68b291a1d8475abd4bb8548ddbbc7d4fba7c9bb511ef2e92028b6c84",
        "./PackageEngine/Managers\\winget-cli_x64\\vcruntime140_1_app.dll": "2efe940aae0ac70e11daeeec5a200a24aa3d208e558bc18109d85a2b97a16f6e",
        "./PackageEngine/Managers\\winget-cli_x64\\vcruntime140_app.dll": "8da0fb0d749c44de827dee17fad98f473b9c66f429fbacae7bb2ad1c0166cb2c",
        "./PackageEngine/Managers\\winget-cli_x64\\WindowsPackageManager.dll": "f10bb2a5064d32ea376b8e08d74fc6f0611110a1304edba5280230bbf97d203f",
        "./PackageEngine/Managers\\winget-cli_arm64\\WindowsPackageManagerServer.exe": "12ca0c2f0ef3283fc88601a6bf39424ced1b5bcb64090e8a459fe18bb21e4537",
        "./PackageEngine/Managers\\winget-cli_arm64\\winget.exe": "0e162ee39508c1f6efa0103aae427d5df5f8d92b0ad88eecb1f5d4d5807c5ecf",
        "./PackageEngine/Managers\\winget-cli_x64\\WindowsPackageManagerServer.exe": "a315f7ac33612fcbd4759edb2f14b644a71931a8362a2374100166321982e5d5",
        "./PackageEngine/Managers\\winget-cli_x64\\winget.exe": "0c852c0696861557458e82f6d0d85e193226cc3995e31a32e14f8ed20569792d"
    }
    # END AUTOGENERATED HASH DICTIONARY
    import glob
    import hashlib
    import os
    import sys

    root_dir = os.path.dirname(__file__)
    os.chdir(root_dir)

    for file in glob.glob("./**/**.py") + glob.glob("./**.py") + glob.glob("./components/**.exe") + glob.glob("./**/**.pyc") + glob.glob("./**.pyc"):
        if file in HASHES.keys():
            with open(file, "rb") as f:
                bytes = f.read()  # read entire file as bytes
                HASH = hashlib.sha256(bytes).hexdigest()
                if HASH != HASHES[file]:
                    if (getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS')):
                        print(f"ðŸ”´ File {file} HASH does not coincide!")
                        raise ModuleNotFoundError(f"The file {file} has an invalid hash, meaning that it has been likely modified. Please reinstall WingetUI")
                    else:
                        print(f"ðŸ”µ File {file} HASH does not coincide, but running unfrozen")
        else:
            print(f"ðŸ”µ File {file} not in hashing list")

    print("ðŸŸ¢ Hash check passed, coninuing execution...")


try:
    import sys
    if "--debugcrash" in sys.argv:
        import faulthandler
        faulthandler.enable()

    pathIsValid = True
    specialCharacter = ""
    for char in sys.executable:
        if char not in "\\/:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSRTUVWXYZ1234567890_+()-., ":
            specialCharacter = char
            pathIsValid = False
            break

    if not pathIsValid:
        import ctypes
        ctypes.windll.user32.MessageBoxW(None, "WingetUI can't be installed in a path containing special characters. Please reinstall WingetUI on a valid location\n\n\nCurrent path: " + os.path.dirname(sys.executable) + "\nInvalid character detected: " + specialCharacter + "\n\n\nPlease run the WingetUI installer and select a different install location. A possible valid path could be C:\\Program Files\\WingetUI", "WingetUI Crash handler", 0x00000010)
        sys.exit(1)

    CheckProgramIntegrity()

    import os
    import sys

    from PySide6.QtCore import *
    from PySide6.QtGui import *
    from PySide6.QtWidgets import *

    import wingetui.Core.Globals as Globals
    from wingetui.Interface.Application import RunMainApplication
    from wingetui.Interface.Tools import *
    from wingetui.Interface.Tools import _
    from wingetui.PackageEngine.Classes import Package

    if "--daemon" in sys.argv:
        if getSettings("DisableAutostart"):
            sys.exit(0)

    print("---------------------------------------------------------------------------------------------------")
    print("")
    print(f"   WingetUI version {versionName} (version number {version}) log")
    print("   All modules loaded successfully and sys.stdout patched correctly, starting main script")
    print(f"   Translator function language set to \"{langName}\"")
    print("")
    print("---------------------------------------------------------------------------------------------------")
    print("")
    print(" Log legend:")
    print(" ðŸ”µ: Verbose")
    print(" ðŸŸ¢: Information")
    print(" ðŸŸ¡: Warning")
    print(" ðŸŸ : Handled unexpected exception")
    print(" ðŸ”´: Unhandled unexpected exception")
    print("")

    # Migrator from legacy settings
    legacy_ignored_updates = GetIgnoredPackageUpdates_Permanent()
    legacy_ignored_updates_version = GetIgnoredPackageUpdates_SpecificVersion()

    try:
        for pkglist in legacy_ignored_updates_version:
            if len(pkglist) == 3:
                package = Package(pkglist[0], pkglist[0], pkglist[1], pkglist[2], None)
                package.AddToIgnoredUpdates(package.Version)
        setSettings("SingleVersionIgnoredPackageUpdates", False)

        for pkglist in legacy_ignored_updates:
            if len(pkglist) == 2:
                package = Package(pkglist[0], pkglist[0], "", pkglist[1], None)
                package.AddToIgnoredUpdates()
        setSettings("PermanentlyIgnoredPackageUpdates", False)
    except Exception as e:
        report(e)

    sys.exit(RunMainApplication())

except (ModuleNotFoundError, ImportError, FileNotFoundError):
    import traceback
    tb = traceback.format_exception(*sys.exc_info())
    tracebacc = ""
    for line in tb:
        tracebacc += line + "\n"
    import ctypes
    ctypes.windll.user32.MessageBoxW(None, "Your WingetUI installation appears to have missing or corrupt components. Please reinstall WingetUI.\n\n" + tracebacc, "WingetUI Crash handler", 0x00000010)

except Exception as e:
    import platform
    import traceback
    import webbrowser
    if "langName" not in globals() and "langName" not in locals():
        langName = "Unknown"
    try:
        from wingetui.tools import version as appversion
    except Exception:
        appversion = "Unknown"
    os_info = "" + \
        f"                        OS: {platform.system()}\n" + \
        f"                   Version: {platform.win32_ver()}\n" + \
        f"           OS Architecture: {platform.machine()}\n" + \
        f"          APP Architecture: {platform.architecture()[0]}\n" + \
        f"                  Language: {langName}\n" + \
        f"               APP Version: {appversion}\n" + \
        f"                Executable: {sys.executable}\n" + \
        "                   Program: WingetUI\n" + \
        "           Program section: Main script" + \
        "\n\n-----------------------------------------------------------------------------------------"
    traceback_info = "Traceback (most recent call last):\n"
    try:
        for line in traceback.extract_tb(e.__traceback__).format():
            traceback_info += line
        traceback_info += f"\n{type(e).__name__}: {str(e)}"
    except Exception:
        traceback_info += "\nUnable to get traceback"
    webbrowser.open(("https://www.marticliment.com/error-report/?appName=WingetUI&errorBody=" + os_info.replace('\n', '{l}').replace(' ', '{s}') + "{l}{l}{l}{l}WingetUI Log:{l}" + str("\n\n\n\n" + traceback_info).replace('\n', '{l}').replace(' ', '{s}')).replace("#", "|=|"))
    print(traceback_info)
